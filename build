#
# Copyright (c) 2018 Jonathan Weyn <jweyn@uw.edu>
#
# See the file LICENSE for your rights.
#

"""
Build the estimator for the MOS-X model.
"""

import sys
import mosx
import pickle
from optparse import OptionParser
from multiprocessing import Process


def get_command_options():
    parser = OptionParser()
    parser.add_option('-e', '--use-existing-files', dest='use_existing', action='store_true', default=False,
                      help='Use existing BUFR, obs, and verification files: use with caution!')
    (opts, args) = parser.parse_args()
    return opts, args


# Get the config dictionary

options, arguments = get_command_options()
use_existing = options.use_existing
try:
    config_file = arguments[0]
except IndexError:
    print('Required argument (config file) not provided.')
    sys.exit(1)
config = mosx.util.get_config(config_file)

if config['multi_stations']: #if using multiple stations
    station_ids = config['station_id']
    bufr_file = ['%s/%s_bufr_train.pkl' % (config['SITE_ROOT'], station_id) for station_id in station_ids]
    obs_file = ['%s/%s_obs_train.pkl' % (config['SITE_ROOT'], station_id) for station_id in station_ids]
    csv_file = ['%s/%s_obs_train.csv' % (config['SITE_ROOT'], station_id) for station_id in station_ids]
    verif_file = ['%s/%s_verif_train.pkl' % (config['SITE_ROOT'], station_id) for station_id in station_ids]
    station_ids_str = ''
    for i in range(len(station_ids)):
        station_id = station_ids[i]
        station_ids_str += station_id + '_'
    station_ids_str = station_ids_str[:-1]
    predictor_file = '%s/%s_predictors_train.pkl' % (config['SITE_ROOT'], station_ids_str)
    estimator_files = config['Model']['estimator_file']
else:
    station_ids = [config['station_id']]
    bufr_file = '%s/%s_bufr_train.pkl' % (config['SITE_ROOT'], config['station_id'])
    obs_file = '%s/%s_obs_train.pkl' % (config['SITE_ROOT'], config['station_id'])
    csv_file = '%s/%s_obs_train.csv' % (config['SITE_ROOT'], config['station_id'])
    verif_file = '%s/%s_verif_train.pkl' % (config['SITE_ROOT'], config['station_id'])
    predictor_file = '%s/%s_predictors_train.pkl' % (config['SITE_ROOT'], config['station_id'])
    estimator_files = [config['Model']['estimator_file']]
        
# Retrieve data; parallelize BUFR and OBS
def get_bufr():
    print('\n--- MOS-X build: initiating BUFR data retrieval...\n')
    mosx.bufr.bufr(config, bufr_file)


def get_obs():
    print('\n--- MOS-X build: initiating OBS data retrieval...\n')
    mosx.obs.obs(config, obs_file, csv_file)


if not use_existing:
    if __name__ == '__main__':
        p1 = Process(target=get_bufr)
        p1.start()
        p2 = Process(target=get_obs)
        p2.start()
        p1.join()
        p2.join()

    print('\n--- MOS-X build: retrieving VERIF data...\n')
    if config['Obs']['use_climo_wind']:
        mosx.verification.verification(config, verif_file, csv_file)
    else:
        mosx.verification.verification(config, verif_file, csv_file, use_climo=False, use_cf6=False)

# Re-format predictors even if using existing raw data
print('\n--- MOS-X build: formatting predictor and target data...\n')
mosx.model.format_predictors(config, bufr_file, obs_file, verif_file, predictor_file)


# Train the estimator and save it

print('\n--- MOS-X build: generating and training estimator...\n')

p_test, t_test, r_test = mosx.model.train(config, predictor_file, test_size=1)


# Test the predictor

print('\n--- MOS-X build: predicting for a test of 1 day...\n')
rain_tuning = config['Model'].get('Rain tuning', None)

# Make a prediction for each station
for i in range(len(station_ids)):
    expected = t_test[i]
    estimator_file = estimator_files[i]
    print('Loading estimator file %s' % estimator_file)
    estimator = mosx.util.read_pkl(estimator_file)
    if rain_tuning is not None and mosx.util.to_bool(rain_tuning.get('use_raw_rain', False)):
        predicted = estimator.predict(p_test[i], rain_array=r_test[i])
    else:
        predicted = estimator.predict(p_test[i])

    num_test = expected.shape[0]
    for t in range(num_test):
        print('\nFor day %d, the predicted forecast is' % t)
        print('%0.0f/%0.0f/%0.0f/%0.2f' % tuple(predicted[t, :4]))
        print('  while the verification was')
        print('%0.0f/%0.0f/%0.0f/%0.2f' % tuple(expected[t, :4]))

